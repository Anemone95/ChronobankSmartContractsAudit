pragma solidity ^0.4.8;

import "./Managed.sol";
import "./LOC.sol";

contract LOCs is Managed {
  address[] offeringCompanies;
  mapping(address => uint) offeringCompaniesIDs;
  event newLOC(address _from, address _LOC);

  function addLOC (address _locAddr) onlyAuthorized() onlyAuthorized() execute(Operations.editMint) {
     offeringCompanies.push(_locAddr);
     offeringCompaniesIDs[_locAddr] = offeringCompanies.length;
  }

  function removeLOC(address _locAddr) onlyAuthorized() execute(Operations.editMint) returns (bool) {
    remove(offeringCompaniesIDs[_locAddr]);
    delete offeringCompaniesIDs[_locAddr];
    return true;
  }

  function remove(uint i) {
        if (i >= offeringCompanies.length) return;

        for (; i<offeringCompanies.length-1; i++){
            offeringCompanies[i] = offeringCompanies[i+1];
        }
        offeringCompanies.length--;
    }

  function proposeLOC(string _name, string _website, uint _issueLimit, string _publishedHash, uint _expDate) onlyAuthorized() returns(address) {
    address locAddr = new LOC(_name,_website,this,_issueLimit,_publishedHash,_expDate);
    offeringCompaniesIDs[locAddr] = offeringCompanies.length++;
    offeringCompanies[offeringCompaniesIDs[locAddr]] = locAddr;
    newLOC(msg.sender, locAddr);
    return locAddr;
  }

  function setLOCStatus(address _LOCaddr, Status status) onlyAuthorized() execute(Operations.editLOC) {
     LOC(_LOCaddr).setStatus(status);
  }

  function setLOCValue(address _LOCaddr, Setting name, uint value) onlyAuthorized() execute(Operations.editLOC) {
    LOC(_LOCaddr).setValue(uint(name),value);
  }

  function setLOCString(address _LOCaddr, Setting name, string value) onlyAuthorized() {
    LOC(_LOCaddr).setString(uint(name),value);
  }

  function getLOCbyID(uint _id) onlyAuthorized() returns(address) {
    return offeringCompanies[_id];
  }

  function getLOCs() onlyAuthorized() returns(address[]) {
    return offeringCompanies;
  }

  function getLOCCount () onlyAuthorized() returns(uint) {
      return offeringCompanies.length;
  }
}
